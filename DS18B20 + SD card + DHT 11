// Libraries

// DS18B20 temperature sensor
#include <OneWire.h>
#include <DallasTemperature.h>

// External SD card
#include <SD.h> // SD card
#include <SPI.h> // SD card

// DHT 11 temperature and humidity sensor
#include <dht_nonblocking.h>


// Variables

// DHT 11
#define DHT_SENSOR_TYPE DHT_TYPE_11
//#define DHT_SENSOR_TYPE DHT_TYPE_21
//#define DHT_SENSOR_TYPE DHT_TYPE_22

static const int DHT_SENSOR_PIN = 4;
DHT_nonblocking dht_sensor( DHT_SENSOR_PIN, DHT_SENSOR_TYPE);


 float temperature;
 float humidity;


// DS18B20

// Data wire is plugged into port 2 on the Arduino
#define ONE_WIRE_BUS 2
#define TEMPERATURE_PRECISION 16 // Lower resolution

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);

int numberOfDevices; // Number of temperature devices found

DeviceAddress tempDeviceAddress; // We'll use this variable to store a found device address

float tempC; // used for data string


// SD card

String dataString1=""; // holds the data to be written to the SD card
String dataString2="";
float sensorReading1 = 1.00; // value read from your first sensor
float sensorReading2 = 0.00; // value read from your second sensor

File sensorData;

File myFile;
const int chipSelect = 8; // changed pin to 8 to accommodate DHT 

void setup()
{
  // start serial port
  Serial.begin(115200);
   sd_setup(); 
  delay(1000); // SD -> logger needs more time to initialize

   
}
  
  // DS18B20
  Serial.println("Dallas Temperature IC Control Library Demo");

  // Start up the library
  sensors.begin();

  // Grab a count of devices on the wire
  numberOfDevices = sensors.getDeviceCount();

  // locate devices on the bus
  Serial.print("Locating devices...");

  Serial.print("Found ");
  Serial.print(numberOfDevices, DEC);
  Serial.println(" devices.");

  // report parasite power requirements
  Serial.print("Parasite power is: ");
  if (sensors.isParasitePowerMode()) Serial.println("ON");
  else Serial.println("OFF");

  // Loop through each device, print out address
  for (int i = 0; i < numberOfDevices; i++)
  {
    // Search the wire for address
    if (sensors.getAddress(tempDeviceAddress, i))
    {
      Serial.print("Found device ");
      Serial.print(i, DEC);
      Serial.print(" with address: ");
      //printAddress(tempDeviceAddress);
      Serial.println();

      Serial.print("Setting resolution to ");
      Serial.println(TEMPERATURE_PRECISION, DEC);

      // set the resolution to TEMPERATURE_PRECISION bit (Each Dallas/Maxim device is capable of several different resolutions)
      sensors.setResolution(tempDeviceAddress, TEMPERATURE_PRECISION);

      Serial.print("Resolution actually set to: ");
      Serial.print(sensors.getResolution(tempDeviceAddress), DEC);
      Serial.println();
    } else {
      Serial.print("Found ghost device at ");
      Serial.print(i, DEC);
      Serial.print(" but could not detect address. Check power and cabling");
    }
  }

}

// DS18B20 -> function to print the temperature for a device
void printTemperature(DeviceAddress deviceAddress)
// prints out temperature readings in Celsius and Fahrenheit twice each
{
  // method 1 - slower
  Serial.print("Temp C: ");
  Serial.print(sensors.getTempC(deviceAddress));
  Serial.print(" Temp F: ");
  Serial.print(sensors.getTempF(deviceAddress)); // Makes a second call to getTempC and then converts to Fahrenheit

  // method 2 - faster
  tempC = sensors.getTempC(deviceAddress);
  Serial.print("Temp C: ");
  Serial.print(tempC);
  Serial.print(" Temp F: ");
  Serial.println(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
}

void loop()
{
  // DHT
  if(dht_sensor.measure(&temperature, &humidity)){
    Serial.print( "T = " );
    Serial.print( temperature, 1 );
    Serial.print( " deg. C, H = " );
    Serial.print( humidity, 1 );
    Serial.println( "%" );
  }
// SD card
prepare_data(); // builds data strings
  saveData(); // saves data to SD card  
}
  //DS18B20
  //call sensors.requestTemperatures() to issue a global temperature
  //request to all devices on the bus
  Serial.print("Requesting temperatures...");
  sensors.requestTemperatures(); // Send the command to get temperatures
  Serial.println("DONE");


  // Loop through each device, print out temperature data
  for (int i = 0; i < numberOfDevices; i++)
  {
    // Search the wire for address
    if (sensors.getAddress(tempDeviceAddress, i))
    {
      // Output the device ID
      Serial.print("Temperature for device: ");
      Serial.println(i, DEC);

      // It responds almost immediately. Let's print out the data
      printTemperature(tempDeviceAddress); // Use a simple function to print out the data
    }
    //else ghost device! Check your power requirements and cabling

  }
  
  
// Functions


// SD card functions
  void sd_setup(){
  Serial.print("Initializing SD card...");
  // IF FAILURE OCCURS: 
    if (!SD.begin(chipSelect)) {
      Serial.println("initialization failed!");
      return;
    }
  
  Serial.println("initialization done.");
  sensorData = SD.open("data.csv", FILE_WRITE);
  sensorData.close();
  read_SD_Directory(); 
}

void prepare_data(){
    // build the data string, experienced errors in compiling during testing
 dataString1 = String(tempC) + "," + String(DallasTemperature::toFahrenheit(tempC));
  dataString2 = String(temperature) + "," + String(humidity);
 Serial.println(dataString1); //Only to show on the Serial Monitor.
  Serial.println(dataString2);
}

void saveData(){
    if(SD.exists("data.csv")){ // check the card is still there
      // now append new data file
      Serial.println("data.csv exists");
      sensorData = SD.open("data.csv", FILE_WRITE);
      if (sensorData){
     sensorData.println(dataString1);
      sensorData.println(dataString2);
      sensorData.close(); // close the file
    }
  }
  else{
    Serial.println("Error writing to file !");
  }
}
void read_SD_Directory(){
    // Read the contents of the SD card
    File root = SD.open("/");
    root.rewindDirectory();
    listFiles(root);
    root.close();
  
}
String listFiles(File dir) 
{
  while(true) {
     File entry = dir.openNextFile();
     if (! entry) {
      Serial.println("NO MORE FILES!");
       // no more files
       break;
     }
     // convert to string to make it easier to work with...
     String entryName = (String)entry.name();
     Serial.println("FOUND: " + entryName);
     entry.close();
     Serial.println("closed: ");
   }
}
// DS18B20 function 
// function to print a device address
void printAddress(DeviceAddress deviceAddress)
{
  for (uint8_t i = 0; i < 8; i++)
  {
    if (deviceAddress[i] < 16) Serial.print("0");
    Serial.print(deviceAddress[i], HEX);
  }
}
